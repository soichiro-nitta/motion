---
description: ルール作成運用（「ルールにして」と依頼された内容を .cursor/rules/*.mdc に反映する）
globs: '**/*'
alwaysApply: true
---

## ルール作成運用

- このプロジェクトでは、「ルールにして」と依頼された内容は **必ず Cursor のプロジェクトルール**（`.cursor/rules/*.mdc`）として追加・更新する。
- 旧式の `.cursorrules` はレガシーのため参照用に留め、実体の管理は `.cursor/rules` フォルダで行う。

### 実施手順

1. `.cursor/rules/{kebab-case-name}.mdc` を作成（または更新）する。
   - 先頭に MDC のメタデータを記述：
     - `description`: ルールの説明
     - `globs`: 対象（既定は `"**/*"`。全体適用に統一すること）
     - `alwaysApply`: 既定は `true`
2. 本文に、ユーザー依頼のルールを日本語で明確かつ簡潔に記述する。
   - 具体的なコマンドや禁止事項、例外条件、適用範囲を含める。
   - 個人情報や秘密情報は含めない。
3. 命名規約：`{カテゴリ}-{要旨}.mdc` の **kebab-case** を用いる。
   - 例: `package-manager.mdc`, `coding-style.mdc`, `tooling.mdc`, `process-rules.mdc`
4. 変更をコミットしてプッシュする。
   - コミットメッセージ規約：`chore(cursor): add/update rule: {name}`

### 既存ルールとの整合性

- 矛盾がある場合は、より狭いスコープ（具体）が広いスコープ（抽象）に優先する。
- 重大な矛盾が生じる場合は、既存ルールを明示的に更新して整合させる。

### この運用ルールの要点

- 以後、「ルールにして」という依頼を受けたら、**自動的に `.cursor/rules/*.mdc` を作成/更新**すること。
- ルール本文は **日本語** で記述すること。

### コミット範囲ポリシー（重要）

- ルール更新のコミットは、原則として **`.cursor/rules/*.mdc` の変更のみに限定**する。
- ルール以外のコード・設定ファイルの変更を同一コミットに混在させない（混在はレビュー性を下げるため禁止）。
- 複数のルールを同時に変更する場合は、**ルールごとにコミットを分割**する。
- 例外が必要な場合（ファイル名変更に伴う参照の一括置換など）は、コミットメッセージ本文に理由を明記する。
